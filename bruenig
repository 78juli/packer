#!/bin/bash
tmpfile="/tmp/output"

err() {
  echo "$1"
  exit 1
}

usage() {
  echo "usage: bruenig [option] package"
  echo
  echo "    -Ss - searches aur for package"
  echo "    -Si - outputs info for package"
  echo "    -h  - outputs this message"
  exit
}

#Get the json file from aur and put into tmpfile
downloadfromaur() {
  wget -q "$url" -O- | sed -e 's/","/"\n"/g' -e 's/\\//g' > "$tmpfile"
  [[ $? -ne 0 ]] && err "Downloading failed."
}

case "$1" in
  '-Ss') option=search ; url="http://aur.archlinux.org/rpc.php?type=search&arg=$2" ;;
  '-Si') option=info ; url="http://aur.archlinux.org/rpc.php?type=info&arg=$2" ;;
  '')    usage ;;
  *)     err "Option \`$1' is not valid." ;;
esac
 
# Search (-Ss) handling
if [[ $option = search ]]; then
  downloadfromaur

  # Fill up the arrays with package information from dump file
  IFS=$'\n'
  name=( $(grep -F '"Name":"' "$tmpfile" | cut -d '"' -f 4) )
  version=( $(grep -F '"Version":"' "$tmpfile" | cut -d '"' -f 4) )
  description=( $(grep -F '"Description":"' "$tmpfile" | sed -e 's/^"Description":"//' -e 's/"$/ /') )

  # Echo out the -Ss formatted package information
  total="${#name[@]}"
  for ((i=0 ; i<$total ; i++)); do
    echo "aur/${name[$i]} ${version[$i]}"
    echo "    ${description[$i]}"
  done
  exit 0
fi

# Info (-Si) handling
if [[ $option = info ]]; then
  downloadfromaur
  
  # Echo out the -Si formatted package information
  # Retrieve each element in order and echo them immediately
  echo "Repository      : aur"

  name="$(grep -F '"Name":' "$tmpfile" | cut -d '"' -f 4)"
  echo "Name            : $name"

  version="$(grep -F '"Version":' "$tmpfile" | cut -d '"' -f 4)"
  echo "Version         : $version"

  url="$(grep -F '"URL":' "$tmpfile" | cut -d '"' -f 4)"
  echo "URL             : $url"

  aurpage="http://aur.archlinux.org/packages.php?ID=$(grep -F '"ID":' "$tmpfile" | cut -d '"' -f 6)"
  echo "AUR Page        : $aurpage"

  categories=(blank blank daemons devel editors emulators games gnome i18n kde lib
              modules multimedia network office science system x11 xfce kernels)
  id="$(grep -F '"CategoryID":' "$tmpfile" | cut -d '"' -f 4)"
  category="${categories[$id]}"
  echo "Category        : $category"
  
  license="$(grep -F '"License":' "$tmpfile" | cut -d '"' -f 4)"
  echo "Licenses        : $license"

  votes="$(grep -F '"NumVotes":' "$tmpfile" | cut -d '"' -f 4)"
  echo "Number of Votes : $votes"
  
  answers=(No Yes)
  num="$(grep -F '"OutOfDate":' "$tmpfile" | cut -d '"' -f 4)"
  outofdate="${answers[$num]}"
  echo "Out of Date     : $outofdate"

  description="$(grep -F '"Description":"' "$tmpfile" | sed -e 's/^"Description":"//' -e 's/"$/ /')"
  echo "Description     : $description"
  echo
fi
