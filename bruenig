#!/bin/bash
tmpfile="/tmp/output"

err() {
  echo "$1"
  exit 1
}

usage() {
  echo "usage: bruenig [option] package"
  echo
  echo "    -S  - installs package"
  echo "    -Ss - searches for package"
  echo "    -Si - outputs info for package"
  echo "    -h  - outputs this message"
  exit
}

# Get the json file from aur and put into tmpfile
getjson() {
  wget -q "$1" -O- | sed -e 's/","/"\n"/g' -e 's/\\//g' > "$tmpfile"
  [[ $? -ne 0 ]] && err "Downloading failed."
}

# Tests whether $1 exists on the aur (uses getjson function from above)
existsinaur() {
  getjson "http://aur.archlinux.org/rpc.php?type=info&arg=$1"
  grep -Fq ':"No result found"' "$tmpfile" && return 1
  return 0
}
  
# Tests whether $1 exists in pacman
existsinpacman() {
  pacman -Si "$1" &>/dev/null
}

# Tests whethere $1 exists locally (i.e. is installed)
existsinlocal() {
  pacman -Qq "$1" &>/dev/null
}

# Scrapes aur package page for dependencies of $1 (uses existsinaur function from above)
findaurdeps() {
  wget -q "http://aur.archlinux.org/packages/$1/$1/PKGBUILD" -O "$tmpfile"
  [[ $? -ne 0 ]] && err "Package \`$1' does not exist."
  . "$tmpfile"
  IFS=$'\n'
  dependencies=( $(echo -e "${depends[*]%%>=*}\n${makedepends[*]%%>=*}" | sort -u) )
}

# Installs packages from aur ($1 is package, $2 is 'dependency' or 'explicit')
aurinstall() {
  dir="/tmp/$1-$USER"
  
  # Prepare the installation directory
  if [[ -f $dir/$1/PKGBUILD ]]; then
    cd "$dir/$1"
  else
    [[ -d $dir ]] && rm -rf $dir
    mkdir "$dir"
    cd "$dir"
    wget "http://aur.archlinux.org/packages/$1/$1.tar.gz"
    tar xf "$1.tar.gz"
    cd "$1"
  fi

  # Allow user to edit PKGBUILD
  if [[ -f PKGBUILD ]]; then
    echo -n "Edit $1 PKGBUILD with \$EDITOR? [Y/n] "
    read -n 1 answer
    echo
    case "$answer" in
      'Y'|'y')
        [[ $EDITOR ]] || EDITOR=vi
        $EDITOR PKGBUILD
        ;;
    esac
  else
    err "No PKGBUILD found in directory."
  fi

  # Allow user to edit .install
  unset install
  . PKGBUILD
  if [[ $install ]]; then
    echo -n "Edit $install with \$EDITOR? [Y/n] "
    read -n 1 answer
    echo
    case "$answer" in
      'Y'|'y')
        [[ $EDITOR ]] || EDITOR=vi
        $EDITOR "$install"
        ;;
    esac 
  fi
  
  # Installation
  makepkg -df
  [[ $? -eq 0 ]] || err "The build failed."
  if [[ $UID -eq 0 ]]; then
    [[ $2 = dependency ]] && pacman --asdeps -U *.pkg.tar.gz
    [[ $2 = explicit ]] && pacman -U *.pkg.tar.gz
  else
    [[ $2 = dependency ]] && sudo pacman --asdeps -U *.pkg.tar.gz
    [[ $2 = explicit ]] && sudo pacman -U *.pkg.tar.gz
  fi
}


#Argument parsing
package="$2"
case "$1" in
  '-S')    option=install ;;
  '-Ss')   option=search ;;
  '-Si')   option=info ;;
  ''|'-h') usage ;;
  *)       err "Option \`$1' is not valid." ;;
esac
 
# Install (-S) handling
if [[ $option = install ]]; then
  
  # Determine whether package is in pacman repos
  if existsinpacman "$package"; then
    if [[ $UID = 0 ]]; then
      pacman -S "$package"
    else
      sudo pacman -S "$package"
    fi
    exit
  fi
    
  # Scrape the aurpage for dependencies
  findaurdeps "$package"
  echo "Resolving dependencies..."

  # If dependencies are not installed, figure out where they can be found
  pacmandeps=()
  aurdeps=()
  for dep in "${dependencies[@]}"; do
    if ! existsinlocal "$dep"; then
      if existsinpacman "$dep"; then
        pacmandeps+=("$dep")
      elif existsinaur "$dep"; then
        aurdeps+=("$dep")
      else
        err "Dependency \`$dep' does not exist."
      fi
    fi
  done

  # Aur dependencies can be complex, so find all of them
  if [[ -n $aurdeps ]]; then
    checkdeps=( "${aurdeps[@]}" )
    while [[ -n $checkdeps ]]; do
      tmpdeps=( "${checkdeps[@]}" )
      checkdeps=()
      for aurdep in "${tmpdeps[@]}"; do
        findaurdeps "$aurdep"
        for dep in "${dependencies[@]}"; do
          if ! [[ "$package ${pacmandeps[@]} ${aurdeps[@]}" =~ "$dep" ]]; then
            if ! existsinlocal "$dep"; then
              if existsinpacman "$dep"; then
                pacmandeps+=("$dep")
              elif existsinaur "$dep"; then
                aurdeps+=("$dep")
                checkdeps+=("$dep")
              else
                err "Dependency \`$dep' does not exist."
              fi
            fi
          fi
        done
      done
    done
  fi

  # Prompt for install or not
  echo
  if [[ $aurdeps ]]; then
    echo "Aur Targets    : ${aurdeps[@]} $package"
  else 
    echo "Aur Targets    : $package"
  fi
  [[ $pacmandeps ]] && echo "Pacman Targets : ${pacmandeps[@]}"
  echo
  echo -n "Proceed with installation? [Y/n] "
  read -n 1 answer
  echo
  case "$answer" in
    'Y'|'y') ;;
    *) exit ;;
  esac

  # Install pacman dependencies
  if [[ -n $pacmandeps ]]; then
    if [[ $UID = 0 ]]; then
      pacman --asdeps --noconfirm -S "${pacmandeps[@]}"
    else
      sudo pacman --asdeps --noconfirm -S "${pacmandeps[@]}"
    fi
  fi
  
  # Install aur dependencies
  if [[ -n $aurdeps ]]; then
    for dep in "${aurdeps[@]}"; do
      aurinstall "$dep" "dependency"
    done
  fi

  # Install the aur package finally
  aurinstall "$package" "explicit"
fi


# Search (-Ss) handling
if [[ $option = search ]]; then
  # Pacman searching 
  pacman -Ss "$package"

  # Aur searching
  getjson "http://aur.archlinux.org/rpc.php?type=search&arg=$package"

  # Fill up the arrays with package information from dump file
  IFS=$'\n'
  name=( $(grep -F '"Name":"' "$tmpfile" | cut -d '"' -f 4) )
  version=( $(grep -F '"Version":"' "$tmpfile" | cut -d '"' -f 4) )
  description=( $(grep -F '"Description":"' "$tmpfile" | sed -e 's/^"Description":"//' -e 's/"$/ /') )

  # Echo out the -Ss formatted package information
  total="${#name[@]}"
  for ((i=0 ; i<$total ; i++)); do
    echo "aur/${name[$i]} ${version[$i]}"
    echo "    ${description[$i]}"
  done
  exit 0
fi

# Info (-Si) handling
if [[ $option = info ]]; then
  # Pacman info check
  pacmanoutput="$(pacman -Si "$package" 2>&1)"
  if ! [[ $pacmanoutput = "error: package '$package' was not found" ]]; then
    echo -e "$pacmanoutput\n"
    exit
  else # Check to see if it is in the aur
    wget -q "http://aur.archlinux.org/packages/$package/$package/PKGBUILD" -O "$tmpfile"
    [[ $? -eq 0 ]] || err "No result found."
    . "$tmpfile"
    
  
    # Echo out the -Si formatted package information
    # Retrieve each element in order and echo them immediately
    echo "Repository      : aur"
    echo "Name            : $pkgname"
    echo "Version         : $pkgver-$pkgrel"
    echo "URL             : $url"
    echo "Licenses        : ${license[*]}"

    [[ -z "${groups}" ]] && groups="None"
    echo "Groups          : ${groups[*]}"

    [[ -z "${provides}" ]] && provides="None"
    echo "Provides        : ${provides[*]}"

    echo "Depends On      : ${depends[*]}"

    echo -n "Optional Deps   : "
    len="${#optdepends[@]}"
    if [[ $len -eq 0 ]]; then
      echo "None"
    else
      for ((i=0 ; i<$len ; i++)); do
        if [[ $i = 0 ]]; then
          echo "${optdepends[$i]}"
        else
          echo "                : ${optdepends[$i]}" 
        fi
      done
    fi

    [[ -z "${conflicts}" ]] && conflicts="None"
    echo "Conflicts With  : ${conflicts[*]}"
    
    [[ -z "${replaces}" ]] && replaces="None"
    echo "Replaces        : ${replaces[*]}"
    echo "Architecture    : ${arch[*]}"
    echo "Description     : $pkgdesc"
    echo
  fi
fi
