#!/bin/bash
# Copyright Matthew Bruenig <matthewbruenig@gmail.com>
# Licensed under GPL version 3

tmpfile="/tmp/packeroutput-$UID"
pacman="$(type -p pacman)"
outputpacman="$(type -p pacman-color)"
if [[ $outputpacman ]]; then
  COLOR1='\e[1;39m'
  COLOR2='\e[1;32m'
  COLOR3='\e[1;35m'
  COLOR4='\e[1;36m'
  COLOR5='\e[1;34m'
  COLOR6='\e[1;33m'
  ENDCOLOR='\e[0m'
else
  outputpacman="$pacman"
fi

err() {
  echo "$1"
  exit 1
}

usage() {
  echo "usage: packer [option] [package] [package] [...]"
  echo
  echo "    -S       - installs package"
  echo "    -Syu|-Su - updates all packages"
  echo "    -Ss      - searches for package"
  echo "    -Si      - outputs info for package"
  echo "    -h       - outputs this message"
  exit
}

# Called whenever anything needs to be run as root ($@ is the command
runasroot() {
  if [[ $UID -eq 0 ]]; then
    "$@"
  elif ! type sudo &>/dev/null && sudo -l "$@" &>/dev/null; then
    sudo "$@"
  else
    echo -n "root "
    # Hack: need to echo to make sure all of the args get in the single set of quotes
    su root -c "$(echo $@)"
  fi
}

# Get the json file from aur and put into tmpfile
getjson() {
  wget -q "$1" -O- | sed -e 's/","/"\n"/g' -e 's/\\//g' > "$tmpfile"
  [[ $? -ne 0 ]] && err "Downloading failed."
}

# Tests whether $1 exists on the aur (uses getjson function from above)
existsinaur() {
  getjson "http://aur.archlinux.org/rpc.php?type=info&arg=$1"
  grep -Fq ':"No result found"' "$tmpfile" && return 1
  return 0
}

# Tests whether $1 exists in pacman
existsinpacman() {
  $pacman -Si "$1" &>/dev/null
}

# Tests whether $1 exists locally (i.e. is installed)
existsinlocal() {
  $pacman -Qq "$1" &>/dev/null
}

# Scrapes the aur deps from PKGBUILDS and puts in globally available dependencies array
scrapeaurdeps() {
  wget -q "http://aur.archlinux.org/packages/$1/$1/PKGBUILD" -O "$tmpfile"
  [[ $? -ne 0 ]] && err "Package \`$1' does not exist."
  . "$tmpfile"
  IFS=$'\n'
  dependencies=( $(echo -e "${depends[*]}\n${makedepends[*]}" | sed -e 's/=.*//' -e 's/>.*//' | sort -u) )
}

# Finds dependencies of package $1
# Sets pacmandeps and aurdeps array, which can be accessed globally after function runs
finddeps() {
  scrapeaurdeps "$1" 
  # loop through dependencies, if not installed, determine if pacman or aur deps
  pacmandeps=()
  aurdeps=()
  for dep in "${dependencies[@]}"; do
    if ! existsinlocal "$dep"; then
      if existsinpacman "$dep"; then
        pacmandeps+=("$dep")
      elif existsinaur "$dep"; then
        aurdeps+=("$dep")
      else
        [[ $option = "install" ]] &&  err "Dependency \`$dep' of \`$1' does not exist."
        echo "Dependency \`$dep of \`$1' does not exist."
        return 1
      fi
    fi
  done

  # Aur dependencies can also have aur dependencies, so find all of them
  if [[ -n $aurdeps ]]; then
    checkdeps=( "${aurdeps[@]}" )
    while [[ -n $checkdeps ]]; do
      tmpdeps=( "${checkdeps[@]}" )
      checkdeps=()
      for aurdep in "${tmpdeps[@]}"; do
        scrapeaurdeps "$aurdep"
        for dep in "${dependencies[@]}"; do
          if ! [[ "$1 ${pacmandeps[@]} ${aurdeps[@]}" =~ "$dep" ]]; then
            if ! existsinlocal "$dep"; then
              if existsinpacman "$dep"; then
                pacmandeps+=("$dep")
              elif existsinaur "$dep"; then
                aurdeps+=("$dep")
                checkdeps+=("$dep")
              else
                err "Dependency \`$dep' does not exist."
              fi
            fi
          fi
        done
      done
    done
  fi
}

# Displays a progress bar ($1 is numerator, $2 is denominator)
aurbar() {
  # Delete line
  printf "\033[0G"
  
  # Get vars for output
  beginline=" aur"
  beginbar="["
  endbar="] "
  perc="$(($1*100/$2))"
  width="$(stty size)"
  width="${width##* }"
  charsbefore="$((${#beginline}+${#1}+${#2}+${#beginbar}+3))"
  spaces="$((52-$charsbefore))"
  barchars="$(($width-52-${#perc}-3))"
  hashes="$(($barchars*$perc/100))" 
  dashes="$(($barchars-$hashes))"

  # Print output
  printf "$beginline %${spaces}s$1  $2 ${beginbar}" ""
  for ((n=1; n<$hashes; n++)); do
    printf "#"
  done
  for ((n=1; n<$dashes; n++)); do
    printf "-"
  done
  printf "${endbar}${perc}%%"
}

# Checks if package is newer on aur ($1 is package name, $2 is local version)
aurversionisnewer() {
  getjson "http://aur.archlinux.org/rpc.php?type=info&arg=$1"
  unset aurversion
  if ! grep -Fq ':"No result found"' "$tmpfile"; then
    aurversion="$(grep -F Version "$tmpfile" | cut -d '"' -f 4)"
    if [[ $aurversion > $2 ]]; then
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

# Installs packages from aur ($1 is package, $2 is dependency or explicit)
aurinstall() {
  dir="/tmp/packer-$UID/$1"

  # Prepare the installation directory
  if [[ -f $dir/$1/PKGBUILD ]]; then
    cd "$dir/$1"
  else
    [[ -d $dir ]] && rm -rf $dir
    mkdir -p "$dir"
    cd "$dir"
    wget "http://aur.archlinux.org/packages/$1/$1.tar.gz"
    tar xf "$1.tar.gz"
    cd "$1"
  fi

  # Allow user to edit PKGBUILD
  if [[ -f PKGBUILD ]]; then
    echo -n "Edit $1 PKGBUILD with \$EDITOR? [Y/n] "
    read -n 1 answer
    echo
    case "$answer" in
      'Y'|'y'|'')
        [[ $EDITOR ]] || EDITOR=vi
        $EDITOR PKGBUILD
        ;;
    esac
  else
    err "No PKGBUILD found in directory."
  fi

  # Allow user to edit .install
  unset install
  . PKGBUILD
  if [[ $install ]]; then
    echo -n "Edit $install with \$EDITOR? [Y/n] "
    read -n 1 answer
    echo
    case "$answer" in
      'Y'|'y'|'')
        [[ $EDITOR ]] || EDITOR=vi
        $EDITOR "$install"
        ;;
    esac 
  fi

  # Installation (makepkg and pacman)
  if [[ $UID -eq 0 ]]; then
    makepkg --asroot -f
  else
    makepkg -f
  fi

  [[ $? -eq 0 ]] || err "The build failed."
  if  [[ $2 = dependency ]]; then
    runasroot $outputpacman --asdeps -U *.pkg.tar.gz
  elif [[ $2 = explicit ]]; then
    runasroot $outputpacman -U *.pkg.tar.gz
  fi
}

# proceed with installation prompt
proceed() {
  echo
  read -r -p "Proceed with installation? [Y/n] "
  case "$REPLY" in
    'Y'|'y'|'') return 0 ;;
    *)       return 1 ;;
  esac
}

# Argument parsing
[[ $1 ]] || usage
packageargs=()
for arg in "$@"; do
  case "$arg" in
    '-S')          option=install ;;
    '-Ss')         option=search ;;
    '-Si')         option=info ;;
    -S*u*)         option=update ;;
    '-h'|'--help') usage ;;
    -*)            err "Option \`$1' is not valid." ;;
    *)             packageargs+=("$arg")
  esac
done

# Sanity checks
[[ $option ]] || err "No option specified."
[[ $option != "update" && -z $packageargs ]] && err "Must specify a package."

# Install (-S) handling
if [[ $option = install ]]; then
  # Figure out all of the packages that need to be installed
  pacmapackages=()
  aurpackages=()
  aurdepends=()
  pacmandepends=()
  for package in "${packageargs[@]}"; do
    # Determine whether package is in pacman repos
    if existsinpacman "$package"; then
      pacmanpackages+=("$package")
    else 
      # find dependencies
      finddeps "$package"
      aurpackages+=("$package")
      aurdepends+=("${aurdeps[@]}")
      pacmandepends+=("${pacmandeps[@]}")
    fi
  done

  # If only pacman packages, then call pacman
  if [[ -n $pacmanpackages && -z $aurpackages ]]; then
    runasroot $outputpacman -S "${pacmanpackages[@]}"
    exit
  else
    # First install the explicit pacman packages, let pacman prompt
    if [[ $pacmanpackages ]]; then
      runasroot $outputpacman -S "${pacmanpackages[@]}"
    fi

    # Prompt for aur packages and their dependencies
    echo
    if [[ $aurdepends ]]; then
      num="$((${#aurdepends[@]}+${#aurpackages[@]}))"
      echo -e "${COLOR6}Aur Targets    ($num):${ENDCOLOR} ${aurdepends[@]} ${aurpackages[@]}"
    else 
      echo -e "${COLOR6}Aur Targets    ($((${#aurpackages[@]}))):${ENDCOLOR} ${aurpackages[@]}"
    fi
    [[ $pacmandepends ]] && echo -e "${COLOR6}Pacman Targets (${#pacmandepends[@]}):${ENDCOLOR} ${pacmandepends[@]}"
    proceed || exit

    # Install pacman dependencies
    if [[ -n $pacmandepends ]]; then
      runasroot $outputpacman --asdeps --noconfirm -S "${pacmandepends[@]}" || err "Installation failed."
    fi 

    # Install aur dependencies
    if [[ -n $aurdepends ]]; then
      for dep in "${aurdepends[@]}"; do
        aurinstall "$dep" "dependency"
      done
    fi 

    # Install the aur packages
    for package in "${aurpackages[@]}"; do
      aurinstall "$package" "explicit"
    done
  fi
fi

# Update (-Su) handling
if [[ $option = update ]]; then
  # Pacman update
  runasroot $outputpacman "$1"

  # Aur update
  echo -e "${COLOR5}:: ${COLOR1}Synchronizing aur database...${ENDCOLOR}"
  IFS=$'\n'
  packages=( $(pacman -Qm) )
  newpackages=()
  total="${#packages[@]}"
  for ((i=0; i<$total; i++)); do 
    aurbar "$((i+1))" "$total"
    if aurversionisnewer "${packages[$i]%% *}" "${packages[$i]##* }"; then
      newpackages+=("${packages[$i]%% *}")
    fi
  done
  echo

  echo -e "${COLOR5}:: ${COLOR1}Starting full aur upgrade...${ENDCOLOR}"
  if [[ $newpackages ]]; then
    echo "resolving dependencies..."
    localpackages=()
    localaurdeps=()
    localpacmandeps=()
    for package in "${newpackages[@]}"; do
      if finddeps "$package"; then
        localpackages+=("$package")
        localaurdeps+=("${aurdeps[@]}")
        localpacmandeps+=("${pacmandeps[@]}")
      else
        echo "Not updating \`$package'."
      fi 
    done

    echo
    if [[ $localaurdeps ]]; then
      num="$((${#localaurdeps[@]}+${#localpackages[@]}))"
      echo -e "${COLOR6}Aur Targets    ($num):${ENDCOLOR} ${localaurdeps[@]} ${localpackages[@]}"
    else 
      num="$((${#localpackages[@]}))"
      echo -e "${COLOR6}Aur Targets    ($num):${ENDCOLOR} ${localpackages[@]}"
    fi
    [[ $localpacmandeps ]] && echo -e "${COLOR6}Pacman Targets ($((${#pacmandeps[@]}))):${ENDCOLOR} ${pacmandeps[@]}"

    proceed || exit
    # Install Pacman Dependencies
    if [[ -n $localpacmandeps ]]; then
      runasroot  $outputpacman --asdeps --noconfirm -S "${localpacmandeps[@]}"
    fi

    # Install aur dependencies
    if [[ -n $localaurdeps ]]; then
      for dep in "${localaurdeps[@]}"; do
        aurinstall "$dep" "dependency"
      done
    fi

    # Install updated packages
    for package in "${localpackages[@]}"; do
      aurinstall "$package" explicit
    done
  else
    echo " local database is up to date"
  fi
fi

# Search (-Ss) handling
if [[ $option = search ]]; then
  # Pacman searching 
  $outputpacman -Ss "${packageargs[@]}"

  # If only one search term, get output a certain quick way
  if  [[ ${#packageargs[@]} -eq 1 ]]; then
    # Fill up the arrays with package information from dump file
    getjson "http://aur.archlinux.org/rpc.php?type=search&arg=$packageargs"
    IFS=$'\n'
    name=( $(grep -F '"Name":"' "$tmpfile" | cut -d '"' -f 4) )
    version=( $(grep -F '"Version":"' "$tmpfile" | cut -d '"' -f 4) )
    description=( $(grep -F '"Description":"' "$tmpfile" | sed -e 's/^"Description":"//' -e 's/"$/ /') )
  else
    wget -q "http://aur.archlinux.org/rpc.php?type=search&arg=$packageargs" -O- | sed -e 's/{/\n{/g' -e 's/\\//g' > "$tmpfile-0"
    for ((i=1 ; i<${#packageargs[@]} ; i++)); do
      grep -e "\"Name\":\".*${packageargs[$i]}.*\",\"Version" -e "\"Description\":\".*${packageargs[$i]}.*\",\"LocationID" "${tmpfile}-$((i-1))" > "$tmpfile-$i"
    done

    # Prepare tmp file and arrays
    sed -e 's/","/"\n"/g' -i "$tmpfile-$((i-1))"
    IFS=$'\n'
    name=( $(grep -F '"Name":"' "$tmpfile-$((i-1))" | cut -d '"' -f 4) )
    version=( $(grep -F '"Version":"' "$tmpfile-$((i-1))" | cut -d '"' -f 4) )
    description=( $(grep -F '"Description":"' "$tmpfile-$((i-1))" | sed -e 's/^"Description":"//' -e 's/"$/ /') )
  fi

  # Remove the tmpfiles
  rm -f "$tmpfile"*
  # Echo out the -Ss formatted package information
  total="${#name[@]}"
  for ((i=0 ; i<$total ; i++)); do
    echo -e "${COLOR3}aur/${COLOR1}${name[$i]} ${COLOR2}${version[$i]}${ENDCOLOR}"
    echo "    ${description[$i]}"
  done
  exit 0
fi

# Info (-Si) handling
if [[ $option = info ]]; then
  # Pacman info check
  for package in "${packageargs[@]}"; do
    if existsinpacman "$package"; then
      $outputpacman -Si "$package"
      exit
    else # Check to see if it is in the aur
      wget -q "http://aur.archlinux.org/packages/$package/$package/PKGBUILD" -O "$tmpfile"
      [[ $? -eq 0 ]] || err "No result found."
      . "$tmpfile"

      # Echo out the -Si formatted package information
      # Retrieve each element in order and echo them immediately
      echo -e "${COLOR1}Repository     : ${COLOR3}aur"
      echo -e "${COLOR1}Name           : $pkgname"
      echo -e "${COLOR1}Version        : ${COLOR2}$pkgver-$pkgrel"
      echo -e "${COLOR1}URL            : ${COLOR4}$url"
      echo -e "${COLOR1}Licenses       : ${ENDCOLOR}${license[*]}"

      [[ -z "${groups}" ]] && groups="None"
      echo -e "${COLOR1}Groups         : ${ENDCOLOR}${groups[*]}"

      [[ -z "${provides}" ]] && provides="None"
      echo -e "${COLOR1}Provides       : ${ENDCOLOR}${provides[*]}"

      echo -e "${COLOR1}Depends On     : ${ENDCOLOR}${depends[*]}"

      echo -e -n "${COLOR1}Optional Deps  : ${ENDCOLOR}"
      len="${#optdepends[@]}"
      if [[ $len -eq 0 ]]; then
        echo "None"
      else
        for ((i=0 ; i<$len ; i++)); do
          if [[ $i = 0 ]]; then
            echo "${optdepends[$i]}"
          else
            echo "                : ${optdepends[$i]}" 
          fi
        done
      fi

      [[ -z "${conflicts}" ]] && conflicts="None"
      echo -e "${COLOR1}Conflicts With : ${ENDCOLOR}${conflicts[*]}"

      [[ -z "${replaces}" ]] && replaces="None"
      echo -e "${COLOR1}Replaces       : ${ENDCOLOR}${replaces[*]}"
      echo -e "${COLOR1}Architecture   : ${ENDCOLOR}${arch[*]}"
      echo -e "${COLOR1}Description    : ${ENDCOLOR}$pkgdesc"
      echo
    fi
  done
fi

