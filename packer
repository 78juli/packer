#!/bin/bash
# Copyright Matthew Bruenig <matthewbruenig@gmail.com>
# Licensed under GPL version 3

tmpfile="/tmp/output-$UID"
if type pacman-color &>/dev/null; then
  outputpacman='pacman-color'
else
  outputpacman='pacman'
fi

err() {
  echo "$1"
  exit 1
}

usage() {
  echo "usage: packer [option] package"
  echo
  echo "    -S       - installs package"
  echo "    -Syu|-Su - updates all packages"
  echo "    -Ss      - searches for package"
  echo "    -Si      - outputs info for package"
  echo "    -h       - outputs this message"
  exit
}

# Get the json file from aur and put into tmpfile
getjson() {
  wget -q "$1" -O- | sed -e 's/","/"\n"/g' -e 's/\\//g' > "$tmpfile"
  [[ $? -ne 0 ]] && err "Downloading failed."
}

# Tests whether $1 exists on the aur (uses getjson function from above)
existsinaur() {
  getjson "http://aur.archlinux.org/rpc.php?type=info&arg=$1"
  grep -Fq ':"No result found"' "$tmpfile" && return 1
  return 0
}

# Tests whether $1 exists in pacman
existsinpacman() {
  pacman -Si "$1" &>/dev/null
}

# Tests whether $1 exists locally (i.e. is installed)
existsinlocal() {
  pacman -Qq "$1" &>/dev/null
}

# Scrapes the aur deps from PKGBUILDS and puts in globally available dependencies array
scrapeaurdeps() {
  wget -q "http://aur.archlinux.org/packages/$1/$1/PKGBUILD" -O "$tmpfile"
  [[ $? -ne 0 ]] && err "Package \`$1' does not exist."
  . "$tmpfile"
  IFS=$'\n'
  dependencies=( $(echo -e "${depends[*]}\n${makedepends[*]}" | sed -e 's/=.*//' -e 's/>.*//' | sort -u) )
}

# Scrapes aur package page for dependencies of $1 (uses existsinaur function from above)
# Sets pacmandeps and aurdeps array, which can be accessed globally after function runs
finddeps() {
  scrapeaurdeps "$1" 
  # loop through dependencies, if not installed, determine if pacman or aur deps
  pacmandeps=()
  aurdeps=()
  for dep in "${dependencies[@]}"; do
    if ! existsinlocal "$dep"; then
      if existsinpacman "$dep"; then
        pacmandeps+=("$dep")
      elif existsinaur "$dep"; then
        aurdeps+=("$dep")
      else
        [[ $option = "install" ]] &&  err "Dependency \`$dep' of \`$package' does not exist."
        echo "Dependency \`$dep of \`$package' does not exist."
        return 1
      fi
    fi
  done

  # Aur dependencies can also have aur dependencies, so find all of them
  if [[ -n $aurdeps ]]; then
    checkdeps=( "${aurdeps[@]}" )
    while [[ -n $checkdeps ]]; do
      tmpdeps=( "${checkdeps[@]}" )
      checkdeps=()
      for aurdep in "${tmpdeps[@]}"; do
        scrapeaurdeps "$aurdep"
        for dep in "${dependencies[@]}"; do
          if ! [[ "$package ${pacmandeps[@]} ${aurdeps[@]}" =~ "$dep" ]]; then
            if ! existsinlocal "$dep"; then
              if existsinpacman "$dep"; then
                pacmandeps+=("$dep")
              elif existsinaur "$dep"; then
                aurdeps+=("$dep")
                checkdeps+=("$dep")
              else
                err "Dependency \`$dep' does not exist."
              fi
            fi
          fi
        done
      done
    done
  fi
}

# Displays a progress bar ($1 is numerator, $2 is denominator)
aurbar() {
  # Delete line
  printf "\033[0G"
  
  # Get vars for output
  beginline=" aur"
  beginbar="["
  endbar="] "
  perc="$(($1*100/$2))"
  width="$(stty size)"
  width="${width##* }"
  charsbefore="$((${#beginline}+${#1}+${#2}+${#beginbar}+3))"
  spaces="$((52-$charsbefore))"
  barchars="$(($width-52-${#perc}-3))"
  hashes="$(($barchars*$perc/100))" 
  dashes="$(($barchars-$hashes))"

  # Print output
  printf "$beginline %${spaces}s$1  $2 ${beginbar}" ""
  for ((n=1; n<$hashes; n++)); do
    printf "#"
  done
  for ((n=1; n<$dashes; n++)); do
    printf "-"
  done
  printf "${endbar}${perc}%%"
}

# Checks if package is newer on aur ($1 is package name, $2 is local version)
aurversionisnewer() {
  getjson "http://aur.archlinux.org/rpc.php?type=info&arg=$1"
  unset aurversion
  if ! grep -Fq ':"No result found"' "$tmpfile"; then
    aurversion="$(grep -F Version "$tmpfile" | cut -d '"' -f 4)"
    if [[ $aurversion > $2 ]]; then
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

# Installs packages from aur ($1 is package, $2 is dependency or explicit)
aurinstall() {
  dir="/tmp/$1-$UID"

  # Prepare the installation directory
  if [[ -f $dir/$1/PKGBUILD ]]; then
    cd "$dir/$1"
  else
    [[ -d $dir ]] && rm -rf $dir
    mkdir "$dir"
    cd "$dir"
    wget "http://aur.archlinux.org/packages/$1/$1.tar.gz"
    tar xf "$1.tar.gz"
    cd "$1"
  fi

  # Allow user to edit PKGBUILD
  if [[ -f PKGBUILD ]]; then
    echo -n "Edit $1 PKGBUILD with \$EDITOR? [Y/n] "
    read -n 1 answer
    echo
    case "$answer" in
      'Y'|'y'|'')
        [[ $EDITOR ]] || EDITOR=vi
        $EDITOR PKGBUILD
        ;;
    esac
  else
    err "No PKGBUILD found in directory."
  fi

  # Allow user to edit .install
  unset install
  . PKGBUILD
  if [[ $install ]]; then
    echo -n "Edit $install with \$EDITOR? [Y/n] "
    read -n 1 answer
    echo
    case "$answer" in
      'Y'|'y'|'')
        [[ $EDITOR ]] || EDITOR=vi
        $EDITOR "$install"
        ;;
    esac 
  fi

  # Installation (makepkg and pacman)
  if [[ $UID -eq 0 ]]; then
    makepkg --asroot -f
  else
    makepkg -f
  fi

  [[ $? -eq 0 ]] || err "The build failed."
  if [[ $UID -eq 0 ]]; then
    [[ $2 = dependency ]] && $outputpacman --asdeps -U *.pkg.tar.gz
    [[ $2 = explicit ]] && $outputpacman -U *.pkg.tar.gz
  else
    [[ $2 = dependency ]] && sudo $outputpacman --asdeps -U *.pkg.tar.gz
    [[ $2 = explicit ]] && sudo $outputpacman -U *.pkg.tar.gz
  fi
}

# proceed with installation prompt
proceed() {
  echo
  read -r -p "Proceed with installation? [Y/n] "
  case "$REPLY" in
    'Y'|'y'|'') return 0 ;;
    *)       return 1 ;;
  esac
}

#Argument parsing
package="$2"
case "$1" in
  '-S')    option=install ;;
  '-Ss')   option=search ;;
  '-Si')   option=info ;;
  -S*u*)   option=update ;;
  ''|'-h') usage ;;
  *)       err "Option \`$1' is not valid." ;;
esac

# Install (-S) handling
if [[ $option = install ]]; then
  # Determine whether package is in pacman repos
  if existsinpacman "$package"; then
    if [[ $UID = 0 ]]; then
      $outputpacman -S "$package"
    else
      sudo $outputpacman -S "$package"
    fi
    exit
  fi

  # Scrape the aurpage for dependencies
  echo "resolving dependencies..."
  finddeps "$package"

  # Prompt for install or not
  echo
  if [[ $aurdeps ]]; then
    echo "Aur Targets    : ${aurdeps[@]} $package"
  else 
    echo "Aur Targets    : $package"
  fi
  [[ $pacmandeps ]] && echo "Pacman Targets : ${pacmandeps[@]}"

  proceed || exit
  # Install pacman dependencies
  if [[ -n $pacmandeps ]]; then
    if [[ $UID = 0 ]]; then
      $outputpacman --asdeps --noconfirm -S "${pacmandeps[@]}" || err "Installation failed."
    else
      sudo $outputpacman --asdeps --noconfirm -S "${pacmandeps[@]}" || err "Installation failed."
    fi
  fi

  # Install aur dependencies
  if [[ -n $aurdeps ]]; then
    for dep in "${aurdeps[@]}"; do
      aurinstall "$dep" "dependency"
    done
  fi

  # Install the aur package
  aurinstall "$package" "explicit"
fi

# Update (-Su) handling
if [[ $option = update ]]; then
  # Pacman update
  if [[ $UID = 0 ]]; then
    $outputpacman "$1"
  else
    sudo $outputpacman "$1"
  fi

  # Aur update
  echo ":: Synchronizing aur database..."
  IFS=$'\n'
  packages=( $(pacman -Qm) )
  newpackages=()
  total="${#packages[@]}"
  for ((i=0; i<$total; i++)); do 
    aurbar "$((i+1))" "$total"
    if aurversionisnewer "${packages[$i]%% *}" "${packages[$i]##* }"; then
      newpackages+=("${package[$i]%% *}")
    fi
  done
  echo

  echo ":: Starting full aur upgrade..."
  if [[ $newpackages ]]; then
    echo "resolving dependencies..."
    localpackages=()
    localaurdeps=()
    localpacmandeps=()
    for package in "${newpackages[@]}"; do
      if finddeps "$package"; then
        localpackages+=("$package")
        localaurdeps+=("${aurdeps[@]}")
        localpacmandeps+=("${pacmandeps[@]}")
      else
        echo "Not updating \`$package'."
      fi 
    done

    echo
    if [[ $localaurdeps ]]; then
      echo "Aur Targets    : ${localaurdeps[@]} ${localpackages[@]}"
    else 
      echo "Aur Targets    : ${localpackages[@]}"
    fi
    [[ $localpacmandeps ]] && echo "Pacman Targets : ${pacmandeps[@]}"

    proceed || exit
    # Install Pacman Dependencies
    if [[ -n $localpacmandeps ]]; then
      if [[ $UID = 0 ]]; then
        $outputpacman --asdeps --noconfirm -S "${localpacmandeps[@]}"
      else
        sudo $outputpacman --asdeps --noconfirm -S "${localpacmandeps[@]}"
      fi
    fi

    # Install aur dependencies
    if [[ -n $localaurdeps ]]; then
      for dep in "${localaurdeps[@]}"; do
        aurinstall "$dep" "dependency"
      done
    fi

    # Install updated packages
    for package in "${localpackages[@]}"; do
      aurinstall "$package" explicit
    done
  else
    echo " local database is up to date"
  fi
fi

# Search (-Ss) handling
if [[ $option = search ]]; then
  # Pacman searching 
  $outputpacman -Ss "$package"

  # Aur searching
  getjson "http://aur.archlinux.org/rpc.php?type=search&arg=$package"

  # Fill up the arrays with package information from dump file
  IFS=$'\n'
  name=( $(grep -F '"Name":"' "$tmpfile" | cut -d '"' -f 4) )
  version=( $(grep -F '"Version":"' "$tmpfile" | cut -d '"' -f 4) )
  description=( $(grep -F '"Description":"' "$tmpfile" | sed -e 's/^"Description":"//' -e 's/"$/ /') )

  # Echo out the -Ss formatted package information
  total="${#name[@]}"
  for ((i=0 ; i<$total ; i++)); do
    echo "aur/${name[$i]} ${version[$i]}"
    echo "    ${description[$i]}"
  done
  exit 0
fi

# Info (-Si) handling
if [[ $option = info ]]; then
  # Pacman info check
  if existsinpacman "$package"; then
    $outputpacman -Si "$package"
    exit
  else # Check to see if it is in the aur
    wget -q "http://aur.archlinux.org/packages/$package/$package/PKGBUILD" -O "$tmpfile"
    [[ $? -eq 0 ]] || err "No result found."
    . "$tmpfile"

    # Echo out the -Si formatted package information
    # Retrieve each element in order and echo them immediately
    echo "Repository      : aur"
    echo "Name            : $pkgname"
    echo "Version         : $pkgver-$pkgrel"
    echo "URL             : $url"
    echo "Licenses        : ${license[*]}"

    [[ -z "${groups}" ]] && groups="None"
    echo "Groups          : ${groups[*]}"

    [[ -z "${provides}" ]] && provides="None"
    echo "Provides        : ${provides[*]}"

    echo "Depends On      : ${depends[*]}"

    echo -n "Optional Deps   : "
    len="${#optdepends[@]}"
    if [[ $len -eq 0 ]]; then
      echo "None"
    else
      for ((i=0 ; i<$len ; i++)); do
        if [[ $i = 0 ]]; then
          echo "${optdepends[$i]}"
        else
          echo "                : ${optdepends[$i]}" 
        fi
      done
    fi

    [[ -z "${conflicts}" ]] && conflicts="None"
    echo "Conflicts With  : ${conflicts[*]}"

    [[ -z "${replaces}" ]] && replaces="None"
    echo "Replaces        : ${replaces[*]}"
    echo "Architecture    : ${arch[*]}"
    echo "Description     : $pkgdesc"
    echo
  fi
fi
